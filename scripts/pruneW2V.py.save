from __future__ import division

import ast
import gensim
from gensim import *
from gensim.models.word2vec import Word2Vec

import pickle
import argparse
import time
import random
import sys
import os

from gensim.models.keyedvectors import KeyedVectors, Vocab

#from numpy import array
#from scipy.cluster.vq import vq, kmeans, whiten
#from scipy.spatial.distance import cosine, euclidean
#from scipy.cluster import hierarchy
#from scipy.cluster.hierarchy import linkage
#from sklearn import cluster
#from sklearn.cluster import KMeans 
#import numpy as np
#import scipy
import fileinput
import string
import itertools
from itertools import permutations
import math
#import argparse
#import copy
#from multiprocessing import Pool
#import fastcluster
#from sklearn.neighbors import NearestNeighbors

histFile = 'histograms/hist.RP.lev'

def pickleInDict(fileName):
	pklFile = open(fileName, 'rb')
	dic = pickle.load(pklFile)
	pklFile.close()
	return dic

def pickleOutDict(fileName,dic):
        pklOut = open(fileName, 'wb')
        pickle.dump(dic, pklOut)

#####
pruned_dic = pickleInDict('models/prunedW2V3.pkl')
print(pruned_dic['AnA'])
exit()
####


w2v = gensim.models.KeyedVectors.load_word2vec_format('models/lev.bin', fvocab=None, binary=True, encoding='utf8', unicode_errors='strict', limit=None)
morph2freq = pickleInDict('models/morph2freq3.pkl')
ngram2difficulty = pickleInDict('models/ngram2difficulty3.pkl')
#print(morph2freq['AnA'])
#print(ngram2difficulty['mA'])
#exit()

#morph2freq = pickleInDict('models/morph2freq.pkl')
#f = open('models/morph2freq.pkl.txt', 'w')
#f.write(str(morph2freq))
#ngram2difficulty = pickleInDict('models/ngram2difficulty.pkl')
#f = open('models/ngram2difficulty.pkl.txt', 'w')
#f.write(str(ngram2difficulty))
#exit()

#f = open('models/morph2freq.pkl.txt', 'r')
#morph2freq = ast.literal_eval(f.read())
#pickleOutDict('models/morph2freq3.pkl', morph2freq)
#f = open('models/ngram2difficulty.pkl.txt', 'r')
#ngram2difficulty = ast.literal_eval(f.read())
#pickleOutDict('models/ngram2difficulty3.pkl', ngram2difficulty)
#exit()





def getStem(nGram):
	nGram = nGram.replace(' ', '_')
	if len(nGram.split()) > 1:
		return None
	else:
		try:
			return word2stem[nGram]
		except:
			minDiff = 1
			stem = None
			for n in range(len(nGram)-1,0,-1): # length of ngram
				for i in range(0,len(nGram)): # starting point of ngram
					if i + n < len(nGram):
						potMorf = nGram[i:i+n]

						# look for a substring as a word
						if potMorf in morph2freq:
							diff = 1/morph2freq[potMorf]
							if diff < minDiff:
								minDiff = diff
								stem = potMorf
						# look for a suffix
						if i > 0 and '+'+potMorf in morph2freq:
							diff = 1/morph2freq['+'+potMorf]
							if diff < minDiff:
								minDiff = diff
								stem = potMorf
							# look for a medial morpheme
							if i + n < len(nGram) -1 and '+'+potMorf+'+' in morph2freq:
								diff = 1/morph2freq['+'+potMorf+'+']
								if diff < minDiff:
									minDiff = diff
									stem = potMorf
						# look for a prefix
						elif i + n < len(nGram) -1 and potMorf+'+' in morph2freq:
							diff = 1/morph2freq[potMorf+'+']
							if diff < minDiff:
								minDiff = diff
								stem = potMorf

				if minDiff != 1:
					return stem

			return stem

def getNNs(s,w2v,ngram2difficulty,morph2freq):
		stem = getStem(s)
		print(stem)
		mostSimilarWords = []
	#try:
		ms = w2v.similar_by_word(s,50)
		for x in ms:
			NN = x[0].replace('_',' ')
			if len(NN.split()) > 1:
				mostSimilarWords.append(convertToUTF8(NN))
			else:
				NNstem = getStem(NN,ngram2difficulty,morph2freq)
				if NNstem != stem or NNstem == None:
					mostSimilarWords.append(convertToUTF8(NN))
			if len(mostSimilarWords) == 3:
				break
		return mostSimilarWords
	#except:
	return [	SORRY, NO KNOWN SIMILAR WORDS']

prunedW2V = {}
counter = 0
for line in fileinput.input(histFile):
	counter += 1
	print(counter)
	count = float(line.split()[0])
	word = line.split()[1]
	outList = getNNs(word,w2v,ngram2difficulty,morph2freq)
	prunedW2V[word] = outList
	if count <= 15:
		break
fileinput.close()
pickleOutDict('prunedW2V3.pkl',prunedW2V)

